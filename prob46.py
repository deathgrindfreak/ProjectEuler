# Project Euler Problem: 46
# Goal: find the smallest odd composite number that cannot be written as the sum of a prime and twice a square
# Author: Cooper Bell

from math import sqrt
from sieve_of_atkin import *


# Generate primes, composite odds and squares for calculation

n = 10000
primes = sieve_of_atkin(n)
odds, squares, comp_odds = [2*i + 1 for i in range(1, (n-1)/2)], [i**2 for i in range(1, int(sqrt(n)) + 1)], []

for odd in odds:								
	if odd not in primes:
		comp_odds += [odd]
		

# Generate a list of composite odds generated by the sum of a prime and twice a square

candidates = []

for prime in primes:
	for square in squares:
			
		candidate = prime + 2*square
			
		if (candidate not in primes) and (candidate <= n):
			candidates += [candidate]


# Test whether there is a composite prime that is not an element of CANDIDATES

for comp in comp_odds:
	if comp not in candidates:
		print comp
